trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest' # Agent hébergé Azure

variables:
  - group: lms-secrets # Variables secrètes
  - name: dockerRegistryServiceConnection
    value: sensiProACRConnection
  - name: kubernetesServiceConnection
    value: sensiProAKSConnection
  - name: containerRegistry
    value: sensiproacr.azurecr.io
  - name: imageTag
    value: $(Build.BuildId)

steps:
  - checkout: self

  # Connexion à ACR
  - task: Docker@2
    displayName: 'Login to ACR'
    inputs:
      command: 'login'
      containerRegistry: '$(dockerRegistryServiceConnection)'

  # Build et push des microservices
  - powershell: |
      Write-Host "DEBUG - containerRegistry: $(containerRegistry)"
      Write-Host "DEBUG - imageTag: $(imageTag)"

      $services = @("api-gateway", "auth-service", "user-service", "payment-service", "course-service", "Client")

      foreach ($dir in $services) {
        $imageTagFull = "$(containerRegistry)/${dir}:$(imageTag)"
        $imageLatest = "$(containerRegistry)/${dir}:latest"

        Write-Host "=== Building and pushing ${dir} image ==="
        docker build -t $imageTagFull -t $imageLatest $dir
        if ($LASTEXITCODE -ne 0) { Write-Error "Build failed for $dir"; exit $LASTEXITCODE }
        docker push $imageTagFull
        if ($LASTEXITCODE -ne 0) { Write-Error "Push failed for $imageTagFull"; exit $LASTEXITCODE }
        docker push $imageLatest
        if ($LASTEXITCODE -ne 0) { Write-Error "Push failed for $imageLatest"; exit $LASTEXITCODE }
      }
    displayName: 'Build and push all microservices'

  # Scan des images avec Trivy
  - script: |
      echo "Installing Trivy..."
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b .
      ./trivy --version

      services=("api-gateway" "auth-service" "user-service" "payment-service" "course-service" "Client")
      for dir in "${services[@]}"; do
        imageTag="$(containerRegistry)/${dir}:$(imageTag)"
        echo "=== Scanning ${dir} image with Trivy ==="
        ./trivy image --exit-code 1 --severity HIGH,CRITICAL "$imageTag"
        if [ $? -ne 0 ]; then exit 1; fi
      done
    displayName: 'Scan all images with Trivy'

  # Déploiement sur AKS
  - task: Kubernetes@1
    displayName: 'Deploy all microservices to AKS'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceConnection: '$(kubernetesServiceConnection)'
      command: 'apply'
      arguments: |
        -n lms-gateway -f k8s/api-gateway-deployment.yaml -f k8s/api-gateway-service.yaml
        -n lms-auth -f k8s/auth-service-deployment.yaml -f k8s/auth-service-service.yaml
        -n lms-course -f k8s/course-service-deployment.yaml -f k8s/course-service-service.yaml
        -n lms-payment -f k8s/payment-service-deployment.yaml -f k8s/payment-service-service.yaml
        -n lms-user -f k8s/user-service-deployment.yaml -f k8s/user-service-service.yaml
        -n lms-frontend -f k8s/frontend-deployment.yaml -f k8s/frontend-service.yaml
