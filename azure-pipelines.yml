trigger:
  branches:
    include:
      - main

pool:
  name: 'Default'
  demands:
    - Agent.Name -equals agent-sensipro

variables:
  - group: lms-secrets
  - name: dockerRegistryServiceConnection
    value: sensiProACRConnection
  - name: kubernetesServiceConnection
    value: sensiProAKSConnection
  - name: containerRegistry
    value: sensiproacr.azurecr.io
  - name: imageTag
    value: $(Build.BuildId)

steps:
  - checkout: self

  # Connexion à ACR
  - task: Docker@2
    displayName: 'Login to ACR'
    inputs:
      command: 'login'
      containerRegistry: '$(dockerRegistryServiceConnection)'

  # Build et push des microservices
  - powershell: |
      $containerRegistry = "$(containerRegistry)"
      if ([string]::IsNullOrEmpty($containerRegistry)) {
          Write-Error "❌ La variable containerRegistry est vide ! Vérifie tes variables de pipeline."
          exit 1
      }

      Write-Host "DEBUG - containerRegistry: $containerRegistry"
      Write-Host "DEBUG - imageTag: $(imageTag)"

      # Dictionnaire microservice => chemin
      $services = @{
          "api-gateway"     = "Server/src/api-gateway"
          "auth-service"    = "Server/src/auth-service"
          "user-service"    = "Server/src/user-service"
          "payment-service" = "Server/src/payment-service"
          "course-service"  = "Server/src/course-service"
          "Client"          = "Client"
      }

      foreach ($dir in $services.Keys) {
          $fullPath = $services[$dir]

          if (-Not (Test-Path $fullPath)) {
              Write-Warning "⚠️ Directory not found: $fullPath. Skipping $dir..."
              continue
          }

          $dirLower = $dir.ToLower()
          $imageTagFull = "$containerRegistry/$dirLower:$(imageTag)"
          $imageLatest   = "$containerRegistry/$dirLower:latest"

          Write-Host "=== Building and pushing ${dir} image from ${fullPath} ==="

          docker build -t $imageTagFull -t $imageLatest $fullPath
          if ($LASTEXITCODE -ne 0) { Write-Error "Build failed for $dir"; exit $LASTEXITCODE }

          docker push $imageTagFull
          if ($LASTEXITCODE -ne 0) { Write-Error "Push failed for $imageTagFull"; exit $LASTEXITCODE }

          docker push $imageLatest
          if ($LASTEXITCODE -ne 0) { Write-Error "Push failed for $imageLatest"; exit $LASTEXITCODE }
      }

      Write-Host "✅ All microservices built and pushed successfully."
    displayName: 'Build and push all microservices'

  # Scan des images avec Trivy
  - script: |
      echo "Installing Trivy..."
      curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b .
      ./trivy --version

      services=("api-gateway" "auth-service" "user-service" "payment-service" "course-service" "Client")
      for dir in "${services[@]}"; do
        dirLower=$(echo $dir | tr '[:upper:]' '[:lower:]')
        imageTag="$containerRegistry/${dirLower}:$(imageTag)"
        
        if docker image inspect "$imageTag" > /dev/null 2>&1; then
            echo "=== Scanning ${dir} image with Trivy ==="
            ./trivy image --exit-code 1 --severity HIGH,CRITICAL "$imageTag"
            if [ $? -ne 0 ]; then exit 1; fi
        else
            echo "⚠️ Image not found: $imageTag. Skipping Trivy scan."
        fi
      done
    displayName: 'Scan all images with Trivy'

  # Déploiement sur AKS
  - task: Kubernetes@1
    displayName: 'Deploy all microservices to AKS'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceConnection: '$(kubernetesServiceConnection)'
      command: 'apply'
      arguments: |
        -n lms-gateway -f k8s/api-gateway-deployment.yaml -f k8s/api-gateway-service.yaml
        -n lms-auth -f k8s/auth-service-deployment.yaml -f k8s/auth-service-service.yaml
        -n lms-course -f k8s/course-service-deployment.yaml -f k8s/course-service-service.yaml
        -n lms-payment -f k8s/payment-service-deployment.yaml -f k8s/payment-service-service.yaml
        -n lms-user -f k8s/user-service-deployment.yaml -f k8s/user-service-service.yaml
        -n lms-frontend -f k8s/frontend-deployment.yaml -f k8s/frontend-service.yaml
